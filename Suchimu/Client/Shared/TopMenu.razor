@inject ISyncLocalStorageService LocalStorage
@inject ICartService CartService
@inject IGameService GameService
@inject NavigationManager NavigationManager

@implements IDisposable

<BlazoredTypeahead SearchMethod="@SearchGame"
                   TValue="Game"
                   TItem="Game"
                   Value="selectedGame"
                   ValueChanged="HandleSearch"
                   ValueExpression="@(() => selectedGame)"
                   placeholder="Search...">
    <SelectedTemplate>
        @context.Title
    </SelectedTemplate>
    <ResultTemplate>
        @context.Title
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, the game cannot be found
    </NotFoundTemplate>
</BlazoredTypeahead>

<a href="cart" class="btn btn-info">
    <i class="oi oi-cart"></i>
    Cart
    <span class="badge badge-pill">@GetCartItemCount()</span>
</a>
<a href="cart" class="btn btn-info">
    <i class="oi oi-book"></i>
    Library
</a>

@code {      
    Game selectedGame;
    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }

    private int GetCartItemCount()
    {
        var cart = LocalStorage.GetItem<List<Game>>("cart");
        return cart != null ? cart.Count : 0;
    }

    private async Task<IEnumerable<Game>> SearchGame(string searchText)
    {
        var response = await GameService.SearchGame(searchText);
        return response;
    }

    private void HandleSearch(Game game)
    {
        if (game == null) return;
        selectedGame = game;
        NavigationManager.NavigateTo($"game/{selectedGame.Id}");
    }
}
